// <auto-generated/>
#pragma warning disable CS0618
using Jellyfin.Sdk.Generated.LiveTv.Programs.Item;
using Jellyfin.Sdk.Generated.LiveTv.Programs.Recommended;
using Jellyfin.Sdk.Generated.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Jellyfin.Sdk.Generated.LiveTv.Programs
{
    /// <summary>
    /// Builds and executes requests for operations under \LiveTv\Programs
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ProgramsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The Recommended property</summary>
        public global::Jellyfin.Sdk.Generated.LiveTv.Programs.Recommended.RecommendedRequestBuilder Recommended
        {
            get => new global::Jellyfin.Sdk.Generated.LiveTv.Programs.Recommended.RecommendedRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Jellyfin.Sdk.Generated.LiveTv.Programs.item collection</summary>
        /// <param name="position">Program id.</param>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.LiveTv.Programs.Item.WithProgramItemRequestBuilder"/></returns>
        public global::Jellyfin.Sdk.Generated.LiveTv.Programs.Item.WithProgramItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("programId", position);
                return new global::Jellyfin.Sdk.Generated.LiveTv.Programs.Item.WithProgramItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Jellyfin.Sdk.Generated.LiveTv.Programs.ProgramsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ProgramsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/LiveTv/Programs{?channelIds*,enableImageTypes*,enableImages*,enableTotalRecordCount*,enableUserData*,fields*,genreIds*,genres*,hasAired*,imageTypeLimit*,isAiring*,isKids*,isMovie*,isNews*,isSeries*,isSports*,librarySeriesId*,limit*,maxEndDate*,maxStartDate*,minEndDate*,minStartDate*,seriesTimerId*,sortBy*,sortOrder*,startIndex*,userId*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Jellyfin.Sdk.Generated.LiveTv.Programs.ProgramsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ProgramsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/LiveTv/Programs{?channelIds*,enableImageTypes*,enableImages*,enableTotalRecordCount*,enableUserData*,fields*,genreIds*,genres*,hasAired*,imageTypeLimit*,isAiring*,isKids*,isMovie*,isNews*,isSeries*,isSports*,librarySeriesId*,limit*,maxEndDate*,maxStartDate*,minEndDate*,minStartDate*,seriesTimerId*,sortBy*,sortOrder*,startIndex*,userId*}", rawUrl)
        {
        }
        /// <summary>
        /// Gets available live tv epgs.
        /// </summary>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.Models.BaseItemDtoQueryResult"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Jellyfin.Sdk.Generated.Models.BaseItemDtoQueryResult?> GetAsync(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.LiveTv.Programs.ProgramsRequestBuilder.ProgramsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Jellyfin.Sdk.Generated.Models.BaseItemDtoQueryResult> GetAsync(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.LiveTv.Programs.ProgramsRequestBuilder.ProgramsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Jellyfin.Sdk.Generated.Models.BaseItemDtoQueryResult>(requestInfo, global::Jellyfin.Sdk.Generated.Models.BaseItemDtoQueryResult.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets available live tv epgs.
        /// </summary>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.Models.BaseItemDtoQueryResult"/></returns>
        /// <param name="body">Get programs dto.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Jellyfin.Sdk.Generated.Models.BaseItemDtoQueryResult?> PostAsync(global::Jellyfin.Sdk.Generated.Models.GetProgramsDto body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Jellyfin.Sdk.Generated.Models.BaseItemDtoQueryResult> PostAsync(global::Jellyfin.Sdk.Generated.Models.GetProgramsDto body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Jellyfin.Sdk.Generated.Models.BaseItemDtoQueryResult>(requestInfo, global::Jellyfin.Sdk.Generated.Models.BaseItemDtoQueryResult.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets available live tv epgs.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.LiveTv.Programs.ProgramsRequestBuilder.ProgramsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.LiveTv.Programs.ProgramsRequestBuilder.ProgramsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json, application/json;profile=\"CamelCase\", application/json;profile=\"PascalCase\"");
            return requestInfo;
        }
        /// <summary>
        /// Gets available live tv epgs.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Get programs dto.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Jellyfin.Sdk.Generated.Models.GetProgramsDto body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Jellyfin.Sdk.Generated.Models.GetProgramsDto body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json, application/json;profile=\"CamelCase\", application/json;profile=\"PascalCase\"");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.LiveTv.Programs.ProgramsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Jellyfin.Sdk.Generated.LiveTv.Programs.ProgramsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Jellyfin.Sdk.Generated.LiveTv.Programs.ProgramsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Gets available live tv epgs.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ProgramsRequestBuilderGetQueryParameters 
        {
            /// <summary>The channels to return guide information for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("channelIds")]
            public Guid?[]? ChannelIds { get; set; }
#nullable restore
#else
            [QueryParameter("channelIds")]
            public Guid?[] ChannelIds { get; set; }
#endif
            /// <summary>Optional. Include image information in output.</summary>
            [QueryParameter("enableImages")]
            public bool? EnableImages { get; set; }
            /// <summary>Optional. The image types to include in the output.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("enableImageTypes")]
            public global::Jellyfin.Sdk.Generated.Models.ImageType[]? EnableImageTypes { get; set; }
#nullable restore
#else
            [QueryParameter("enableImageTypes")]
            public global::Jellyfin.Sdk.Generated.Models.ImageType[] EnableImageTypes { get; set; }
#endif
            /// <summary>Retrieve total record count.</summary>
            [QueryParameter("enableTotalRecordCount")]
            public bool? EnableTotalRecordCount { get; set; }
            /// <summary>Optional. Include user data.</summary>
            [QueryParameter("enableUserData")]
            public bool? EnableUserData { get; set; }
            /// <summary>Optional. Specify additional fields of information to return in the output.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("fields")]
            public global::Jellyfin.Sdk.Generated.Models.ItemFields[]? Fields { get; set; }
#nullable restore
#else
            [QueryParameter("fields")]
            public global::Jellyfin.Sdk.Generated.Models.ItemFields[] Fields { get; set; }
#endif
            /// <summary>The genre ids to return guide information for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("genreIds")]
            public Guid?[]? GenreIds { get; set; }
#nullable restore
#else
            [QueryParameter("genreIds")]
            public Guid?[] GenreIds { get; set; }
#endif
            /// <summary>The genres to return guide information for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("genres")]
            public string[]? Genres { get; set; }
#nullable restore
#else
            [QueryParameter("genres")]
            public string[] Genres { get; set; }
#endif
            /// <summary>Optional. Filter by programs that have completed airing, or not.</summary>
            [QueryParameter("hasAired")]
            public bool? HasAired { get; set; }
            /// <summary>Optional. The max number of images to return, per image type.</summary>
            [QueryParameter("imageTypeLimit")]
            public int? ImageTypeLimit { get; set; }
            /// <summary>Optional. Filter by programs that are currently airing, or not.</summary>
            [QueryParameter("isAiring")]
            public bool? IsAiring { get; set; }
            /// <summary>Optional. Filter for kids.</summary>
            [QueryParameter("isKids")]
            public bool? IsKids { get; set; }
            /// <summary>Optional. Filter for movies.</summary>
            [QueryParameter("isMovie")]
            public bool? IsMovie { get; set; }
            /// <summary>Optional. Filter for news.</summary>
            [QueryParameter("isNews")]
            public bool? IsNews { get; set; }
            /// <summary>Optional. Filter for series.</summary>
            [QueryParameter("isSeries")]
            public bool? IsSeries { get; set; }
            /// <summary>Optional. Filter for sports.</summary>
            [QueryParameter("isSports")]
            public bool? IsSports { get; set; }
            /// <summary>Optional. Filter by library series id.</summary>
            [QueryParameter("librarySeriesId")]
            public Guid? LibrarySeriesId { get; set; }
            /// <summary>Optional. The maximum number of records to return.</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>Optional. The maximum premiere end date.</summary>
            [QueryParameter("maxEndDate")]
            public DateTimeOffset? MaxEndDate { get; set; }
            /// <summary>Optional. The maximum premiere start date.</summary>
            [QueryParameter("maxStartDate")]
            public DateTimeOffset? MaxStartDate { get; set; }
            /// <summary>Optional. The minimum premiere end date.</summary>
            [QueryParameter("minEndDate")]
            public DateTimeOffset? MinEndDate { get; set; }
            /// <summary>Optional. The minimum premiere start date.</summary>
            [QueryParameter("minStartDate")]
            public DateTimeOffset? MinStartDate { get; set; }
            /// <summary>Optional. Filter by series timer id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("seriesTimerId")]
            public string? SeriesTimerId { get; set; }
#nullable restore
#else
            [QueryParameter("seriesTimerId")]
            public string SeriesTimerId { get; set; }
#endif
            /// <summary>Optional. Specify one or more sort orders, comma delimited. Options: Name, StartDate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortBy")]
            public global::Jellyfin.Sdk.Generated.Models.ItemSortBy[]? SortBy { get; set; }
#nullable restore
#else
            [QueryParameter("sortBy")]
            public global::Jellyfin.Sdk.Generated.Models.ItemSortBy[] SortBy { get; set; }
#endif
            /// <summary>Sort Order - Ascending,Descending.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortOrder")]
            public global::Jellyfin.Sdk.Generated.Models.SortOrder[]? SortOrder { get; set; }
#nullable restore
#else
            [QueryParameter("sortOrder")]
            public global::Jellyfin.Sdk.Generated.Models.SortOrder[] SortOrder { get; set; }
#endif
            /// <summary>Optional. The record index to start at. All items with a lower index will be dropped from the results.</summary>
            [QueryParameter("startIndex")]
            public int? StartIndex { get; set; }
            /// <summary>Optional. Filter by user id.</summary>
            [QueryParameter("userId")]
            public Guid? UserId { get; set; }
        }
    }
}
#pragma warning restore CS0618

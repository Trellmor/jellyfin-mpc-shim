// <auto-generated/>
#pragma warning disable CS0618
using Jellyfin.Sdk.Generated.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Jellyfin.Sdk.Generated.Items.Filters2
{
    /// <summary>
    /// Builds and executes requests for operations under \Items\Filters2
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Filters2RequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Jellyfin.Sdk.Generated.Items.Filters2.Filters2RequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Filters2RequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Items/Filters2{?includeItemTypes*,isAiring*,isKids*,isMovie*,isNews*,isSeries*,isSports*,parentId*,recursive*,userId*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Jellyfin.Sdk.Generated.Items.Filters2.Filters2RequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Filters2RequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Items/Filters2{?includeItemTypes*,isAiring*,isKids*,isMovie*,isNews*,isSeries*,isSports*,parentId*,recursive*,userId*}", rawUrl)
        {
        }
        /// <summary>
        /// Gets query filters.
        /// </summary>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.Models.QueryFilters"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Jellyfin.Sdk.Generated.Models.QueryFilters?> GetAsync(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Items.Filters2.Filters2RequestBuilder.Filters2RequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Jellyfin.Sdk.Generated.Models.QueryFilters> GetAsync(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Items.Filters2.Filters2RequestBuilder.Filters2RequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Jellyfin.Sdk.Generated.Models.QueryFilters>(requestInfo, global::Jellyfin.Sdk.Generated.Models.QueryFilters.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets query filters.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Items.Filters2.Filters2RequestBuilder.Filters2RequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Items.Filters2.Filters2RequestBuilder.Filters2RequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json, application/json;profile=\"CamelCase\", application/json;profile=\"PascalCase\"");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.Items.Filters2.Filters2RequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Jellyfin.Sdk.Generated.Items.Filters2.Filters2RequestBuilder WithUrl(string rawUrl)
        {
            return new global::Jellyfin.Sdk.Generated.Items.Filters2.Filters2RequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Gets query filters.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Filters2RequestBuilderGetQueryParameters 
        {
            /// <summary>Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("includeItemTypes")]
            public global::Jellyfin.Sdk.Generated.Models.BaseItemKind[]? IncludeItemTypes { get; set; }
#nullable restore
#else
            [QueryParameter("includeItemTypes")]
            public global::Jellyfin.Sdk.Generated.Models.BaseItemKind[] IncludeItemTypes { get; set; }
#endif
            /// <summary>Optional. Is item airing.</summary>
            [QueryParameter("isAiring")]
            public bool? IsAiring { get; set; }
            /// <summary>Optional. Is item kids.</summary>
            [QueryParameter("isKids")]
            public bool? IsKids { get; set; }
            /// <summary>Optional. Is item movie.</summary>
            [QueryParameter("isMovie")]
            public bool? IsMovie { get; set; }
            /// <summary>Optional. Is item news.</summary>
            [QueryParameter("isNews")]
            public bool? IsNews { get; set; }
            /// <summary>Optional. Is item series.</summary>
            [QueryParameter("isSeries")]
            public bool? IsSeries { get; set; }
            /// <summary>Optional. Is item sports.</summary>
            [QueryParameter("isSports")]
            public bool? IsSports { get; set; }
            /// <summary>Optional. Specify this to localize the search to a specific item or folder. Omit to use the root.</summary>
            [QueryParameter("parentId")]
            public Guid? ParentId { get; set; }
            /// <summary>Optional. Search recursive.</summary>
            [QueryParameter("recursive")]
            public bool? Recursive { get; set; }
            /// <summary>Optional. User id.</summary>
            [QueryParameter("userId")]
            public Guid? UserId { get; set; }
        }
    }
}
#pragma warning restore CS0618

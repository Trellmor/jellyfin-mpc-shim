// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Jellyfin.Sdk.Generated.Models
{
    /// <summary>
    /// LyricMetadata model.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LyricMetadata : IParsable
    {
        /// <summary>Gets or sets the album this song is on.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Album { get; set; }
#nullable restore
#else
        public string Album { get; set; }
#endif
        /// <summary>Gets or sets the song artist.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Artist { get; set; }
#nullable restore
#else
        public string Artist { get; set; }
#endif
        /// <summary>Gets or sets the author of the lyric data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Author { get; set; }
#nullable restore
#else
        public string Author { get; set; }
#endif
        /// <summary>Gets or sets who the LRC file was created by.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? By { get; set; }
#nullable restore
#else
        public string By { get; set; }
#endif
        /// <summary>Gets or sets the software used to create the LRC file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Creator { get; set; }
#nullable restore
#else
        public string Creator { get; set; }
#endif
        /// <summary>Gets or sets a value indicating whether this lyric is synced.</summary>
        public bool? IsSynced { get; set; }
        /// <summary>Gets or sets the length of the song in ticks.</summary>
        public long? Length { get; set; }
        /// <summary>Gets or sets the lyric offset compared to audio in ticks.</summary>
        public long? Offset { get; set; }
        /// <summary>Gets or sets the title of the song.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>Gets or sets the version of the creator used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; set; }
#nullable restore
#else
        public string Version { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.Models.LyricMetadata"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Jellyfin.Sdk.Generated.Models.LyricMetadata CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Jellyfin.Sdk.Generated.Models.LyricMetadata();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "Album", n => { Album = n.GetStringValue(); } },
                { "Artist", n => { Artist = n.GetStringValue(); } },
                { "Author", n => { Author = n.GetStringValue(); } },
                { "By", n => { By = n.GetStringValue(); } },
                { "Creator", n => { Creator = n.GetStringValue(); } },
                { "IsSynced", n => { IsSynced = n.GetBoolValue(); } },
                { "Length", n => { Length = n.GetLongValue(); } },
                { "Offset", n => { Offset = n.GetLongValue(); } },
                { "Title", n => { Title = n.GetStringValue(); } },
                { "Version", n => { Version = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("Album", Album);
            writer.WriteStringValue("Artist", Artist);
            writer.WriteStringValue("Author", Author);
            writer.WriteStringValue("By", By);
            writer.WriteStringValue("Creator", Creator);
            writer.WriteBoolValue("IsSynced", IsSynced);
            writer.WriteLongValue("Length", Length);
            writer.WriteLongValue("Offset", Offset);
            writer.WriteStringValue("Title", Title);
            writer.WriteStringValue("Version", Version);
        }
    }
}
#pragma warning restore CS0618

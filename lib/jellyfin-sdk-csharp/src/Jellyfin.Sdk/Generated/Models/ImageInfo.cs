// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Jellyfin.Sdk.Generated.Models
{
    /// <summary>
    /// Class ImageInfo.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ImageInfo : IParsable
    {
        /// <summary>Gets or sets the blurhash.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BlurHash { get; set; }
#nullable restore
#else
        public string BlurHash { get; set; }
#endif
        /// <summary>Gets or sets the height.</summary>
        public int? Height { get; set; }
        /// <summary>Gets or sets the index of the image.</summary>
        public int? ImageIndex { get; set; }
        /// <summary>Gets or sets the image tag.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageTag { get; set; }
#nullable restore
#else
        public string ImageTag { get; set; }
#endif
        /// <summary>Gets or sets the type of the image.</summary>
        public global::Jellyfin.Sdk.Generated.Models.ImageInfo_ImageType? ImageType { get; set; }
        /// <summary>Gets or sets the path.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Path { get; set; }
#nullable restore
#else
        public string Path { get; set; }
#endif
        /// <summary>Gets or sets the size.</summary>
        public long? Size { get; set; }
        /// <summary>Gets or sets the width.</summary>
        public int? Width { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.Models.ImageInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Jellyfin.Sdk.Generated.Models.ImageInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Jellyfin.Sdk.Generated.Models.ImageInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "BlurHash", n => { BlurHash = n.GetStringValue(); } },
                { "Height", n => { Height = n.GetIntValue(); } },
                { "ImageIndex", n => { ImageIndex = n.GetIntValue(); } },
                { "ImageTag", n => { ImageTag = n.GetStringValue(); } },
                { "ImageType", n => { ImageType = n.GetEnumValue<global::Jellyfin.Sdk.Generated.Models.ImageInfo_ImageType>(); } },
                { "Path", n => { Path = n.GetStringValue(); } },
                { "Size", n => { Size = n.GetLongValue(); } },
                { "Width", n => { Width = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("BlurHash", BlurHash);
            writer.WriteIntValue("Height", Height);
            writer.WriteIntValue("ImageIndex", ImageIndex);
            writer.WriteStringValue("ImageTag", ImageTag);
            writer.WriteEnumValue<global::Jellyfin.Sdk.Generated.Models.ImageInfo_ImageType>("ImageType", ImageType);
            writer.WriteStringValue("Path", Path);
            writer.WriteLongValue("Size", Size);
            writer.WriteIntValue("Width", Width);
        }
    }
}
#pragma warning restore CS0618

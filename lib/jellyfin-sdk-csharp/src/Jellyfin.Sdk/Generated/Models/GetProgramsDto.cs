// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Jellyfin.Sdk.Generated.Models
{
    /// <summary>
    /// Get programs dto.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class GetProgramsDto : IParsable
    {
        /// <summary>Gets or sets the channels to return guide information for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? ChannelIds { get; set; }
#nullable restore
#else
        public List<Guid?> ChannelIds { get; set; }
#endif
        /// <summary>Gets or sets include image information in output.</summary>
        public bool? EnableImages { get; set; }
        /// <summary>Gets or sets the image types to include in the output.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Jellyfin.Sdk.Generated.Models.ImageType?>? EnableImageTypes { get; set; }
#nullable restore
#else
        public List<global::Jellyfin.Sdk.Generated.Models.ImageType?> EnableImageTypes { get; set; }
#endif
        /// <summary>Gets or sets a value indicating whether retrieve total record count.</summary>
        public bool? EnableTotalRecordCount { get; set; }
        /// <summary>Gets or sets include user data.</summary>
        public bool? EnableUserData { get; set; }
        /// <summary>Gets or sets specify additional fields of information to return in the output.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Jellyfin.Sdk.Generated.Models.ItemFields?>? Fields { get; set; }
#nullable restore
#else
        public List<global::Jellyfin.Sdk.Generated.Models.ItemFields?> Fields { get; set; }
#endif
        /// <summary>Gets or sets the genre ids to return guide information for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? GenreIds { get; set; }
#nullable restore
#else
        public List<Guid?> GenreIds { get; set; }
#endif
        /// <summary>Gets or sets the genres to return guide information for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Genres { get; set; }
#nullable restore
#else
        public List<string> Genres { get; set; }
#endif
        /// <summary>Gets or sets filter by programs that have completed airing, or not.</summary>
        public bool? HasAired { get; set; }
        /// <summary>Gets or sets the max number of images to return, per image type.</summary>
        public int? ImageTypeLimit { get; set; }
        /// <summary>Gets or sets filter by programs that are currently airing, or not.</summary>
        public bool? IsAiring { get; set; }
        /// <summary>Gets or sets filter for kids.</summary>
        public bool? IsKids { get; set; }
        /// <summary>Gets or sets filter for movies.</summary>
        public bool? IsMovie { get; set; }
        /// <summary>Gets or sets filter for news.</summary>
        public bool? IsNews { get; set; }
        /// <summary>Gets or sets filter for series.</summary>
        public bool? IsSeries { get; set; }
        /// <summary>Gets or sets filter for sports.</summary>
        public bool? IsSports { get; set; }
        /// <summary>Gets or sets filter by library series id.</summary>
        public Guid? LibrarySeriesId { get; set; }
        /// <summary>Gets or sets the maximum number of records to return.</summary>
        public int? Limit { get; set; }
        /// <summary>Gets or sets the maximum premiere end date.</summary>
        public DateTimeOffset? MaxEndDate { get; set; }
        /// <summary>Gets or sets the maximum premiere start date.</summary>
        public DateTimeOffset? MaxStartDate { get; set; }
        /// <summary>Gets or sets the minimum premiere end date.</summary>
        public DateTimeOffset? MinEndDate { get; set; }
        /// <summary>Gets or sets the minimum premiere start date.</summary>
        public DateTimeOffset? MinStartDate { get; set; }
        /// <summary>Gets or sets filter by series timer id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SeriesTimerId { get; set; }
#nullable restore
#else
        public string SeriesTimerId { get; set; }
#endif
        /// <summary>Gets or sets specify one or more sort orders, comma delimited. Options: Name, StartDate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Jellyfin.Sdk.Generated.Models.ItemSortBy?>? SortBy { get; set; }
#nullable restore
#else
        public List<global::Jellyfin.Sdk.Generated.Models.ItemSortBy?> SortBy { get; set; }
#endif
        /// <summary>Gets or sets sort order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Jellyfin.Sdk.Generated.Models.SortOrder?>? SortOrder { get; set; }
#nullable restore
#else
        public List<global::Jellyfin.Sdk.Generated.Models.SortOrder?> SortOrder { get; set; }
#endif
        /// <summary>Gets or sets the record index to start at. All items with a lower index will be dropped from the results.</summary>
        public int? StartIndex { get; set; }
        /// <summary>Gets or sets optional. Filter by user id.</summary>
        public Guid? UserId { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.Models.GetProgramsDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Jellyfin.Sdk.Generated.Models.GetProgramsDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Jellyfin.Sdk.Generated.Models.GetProgramsDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ChannelIds", n => { ChannelIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "EnableImageTypes", n => { EnableImageTypes = n.GetCollectionOfEnumValues<global::Jellyfin.Sdk.Generated.Models.ImageType>()?.AsList(); } },
                { "EnableImages", n => { EnableImages = n.GetBoolValue(); } },
                { "EnableTotalRecordCount", n => { EnableTotalRecordCount = n.GetBoolValue(); } },
                { "EnableUserData", n => { EnableUserData = n.GetBoolValue(); } },
                { "Fields", n => { Fields = n.GetCollectionOfEnumValues<global::Jellyfin.Sdk.Generated.Models.ItemFields>()?.AsList(); } },
                { "GenreIds", n => { GenreIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "Genres", n => { Genres = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "HasAired", n => { HasAired = n.GetBoolValue(); } },
                { "ImageTypeLimit", n => { ImageTypeLimit = n.GetIntValue(); } },
                { "IsAiring", n => { IsAiring = n.GetBoolValue(); } },
                { "IsKids", n => { IsKids = n.GetBoolValue(); } },
                { "IsMovie", n => { IsMovie = n.GetBoolValue(); } },
                { "IsNews", n => { IsNews = n.GetBoolValue(); } },
                { "IsSeries", n => { IsSeries = n.GetBoolValue(); } },
                { "IsSports", n => { IsSports = n.GetBoolValue(); } },
                { "LibrarySeriesId", n => { LibrarySeriesId = n.GetGuidValue(); } },
                { "Limit", n => { Limit = n.GetIntValue(); } },
                { "MaxEndDate", n => { MaxEndDate = n.GetDateTimeOffsetValue(); } },
                { "MaxStartDate", n => { MaxStartDate = n.GetDateTimeOffsetValue(); } },
                { "MinEndDate", n => { MinEndDate = n.GetDateTimeOffsetValue(); } },
                { "MinStartDate", n => { MinStartDate = n.GetDateTimeOffsetValue(); } },
                { "SeriesTimerId", n => { SeriesTimerId = n.GetStringValue(); } },
                { "SortBy", n => { SortBy = n.GetCollectionOfEnumValues<global::Jellyfin.Sdk.Generated.Models.ItemSortBy>()?.AsList(); } },
                { "SortOrder", n => { SortOrder = n.GetCollectionOfEnumValues<global::Jellyfin.Sdk.Generated.Models.SortOrder>()?.AsList(); } },
                { "StartIndex", n => { StartIndex = n.GetIntValue(); } },
                { "UserId", n => { UserId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<Guid?>("ChannelIds", ChannelIds);
            writer.WriteBoolValue("EnableImages", EnableImages);
            writer.WriteCollectionOfEnumValues<global::Jellyfin.Sdk.Generated.Models.ImageType>("EnableImageTypes", EnableImageTypes);
            writer.WriteBoolValue("EnableTotalRecordCount", EnableTotalRecordCount);
            writer.WriteBoolValue("EnableUserData", EnableUserData);
            writer.WriteCollectionOfEnumValues<global::Jellyfin.Sdk.Generated.Models.ItemFields>("Fields", Fields);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("GenreIds", GenreIds);
            writer.WriteCollectionOfPrimitiveValues<string>("Genres", Genres);
            writer.WriteBoolValue("HasAired", HasAired);
            writer.WriteIntValue("ImageTypeLimit", ImageTypeLimit);
            writer.WriteBoolValue("IsAiring", IsAiring);
            writer.WriteBoolValue("IsKids", IsKids);
            writer.WriteBoolValue("IsMovie", IsMovie);
            writer.WriteBoolValue("IsNews", IsNews);
            writer.WriteBoolValue("IsSeries", IsSeries);
            writer.WriteBoolValue("IsSports", IsSports);
            writer.WriteGuidValue("LibrarySeriesId", LibrarySeriesId);
            writer.WriteIntValue("Limit", Limit);
            writer.WriteDateTimeOffsetValue("MaxEndDate", MaxEndDate);
            writer.WriteDateTimeOffsetValue("MaxStartDate", MaxStartDate);
            writer.WriteDateTimeOffsetValue("MinEndDate", MinEndDate);
            writer.WriteDateTimeOffsetValue("MinStartDate", MinStartDate);
            writer.WriteStringValue("SeriesTimerId", SeriesTimerId);
            writer.WriteCollectionOfEnumValues<global::Jellyfin.Sdk.Generated.Models.ItemSortBy>("SortBy", SortBy);
            writer.WriteCollectionOfEnumValues<global::Jellyfin.Sdk.Generated.Models.SortOrder>("SortOrder", SortOrder);
            writer.WriteIntValue("StartIndex", StartIndex);
            writer.WriteGuidValue("UserId", UserId);
        }
    }
}
#pragma warning restore CS0618

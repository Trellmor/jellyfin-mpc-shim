// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Jellyfin.Sdk.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RemoteSubtitleInfo : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The AiTranslated property</summary>
        public bool? AiTranslated { get; set; }
        /// <summary>The Author property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Author { get; set; }
#nullable restore
#else
        public string Author { get; set; }
#endif
        /// <summary>The Comment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comment { get; set; }
#nullable restore
#else
        public string Comment { get; set; }
#endif
        /// <summary>The CommunityRating property</summary>
        public float? CommunityRating { get; set; }
        /// <summary>The DateCreated property</summary>
        public DateTimeOffset? DateCreated { get; set; }
        /// <summary>The DownloadCount property</summary>
        public int? DownloadCount { get; set; }
        /// <summary>The Forced property</summary>
        public bool? Forced { get; set; }
        /// <summary>The Format property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Format { get; set; }
#nullable restore
#else
        public string Format { get; set; }
#endif
        /// <summary>The FrameRate property</summary>
        public float? FrameRate { get; set; }
        /// <summary>The HearingImpaired property</summary>
        public bool? HearingImpaired { get; set; }
        /// <summary>The Id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The IsHashMatch property</summary>
        public bool? IsHashMatch { get; set; }
        /// <summary>The MachineTranslated property</summary>
        public bool? MachineTranslated { get; set; }
        /// <summary>The Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The ProviderName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProviderName { get; set; }
#nullable restore
#else
        public string ProviderName { get; set; }
#endif
        /// <summary>The ThreeLetterISOLanguageName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThreeLetterISOLanguageName { get; set; }
#nullable restore
#else
        public string ThreeLetterISOLanguageName { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.Models.RemoteSubtitleInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Jellyfin.Sdk.Generated.Models.RemoteSubtitleInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Jellyfin.Sdk.Generated.Models.RemoteSubtitleInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "AiTranslated", n => { AiTranslated = n.GetBoolValue(); } },
                { "Author", n => { Author = n.GetStringValue(); } },
                { "Comment", n => { Comment = n.GetStringValue(); } },
                { "CommunityRating", n => { CommunityRating = n.GetFloatValue(); } },
                { "DateCreated", n => { DateCreated = n.GetDateTimeOffsetValue(); } },
                { "DownloadCount", n => { DownloadCount = n.GetIntValue(); } },
                { "Forced", n => { Forced = n.GetBoolValue(); } },
                { "Format", n => { Format = n.GetStringValue(); } },
                { "FrameRate", n => { FrameRate = n.GetFloatValue(); } },
                { "HearingImpaired", n => { HearingImpaired = n.GetBoolValue(); } },
                { "Id", n => { Id = n.GetStringValue(); } },
                { "IsHashMatch", n => { IsHashMatch = n.GetBoolValue(); } },
                { "MachineTranslated", n => { MachineTranslated = n.GetBoolValue(); } },
                { "Name", n => { Name = n.GetStringValue(); } },
                { "ProviderName", n => { ProviderName = n.GetStringValue(); } },
                { "ThreeLetterISOLanguageName", n => { ThreeLetterISOLanguageName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("AiTranslated", AiTranslated);
            writer.WriteStringValue("Author", Author);
            writer.WriteStringValue("Comment", Comment);
            writer.WriteFloatValue("CommunityRating", CommunityRating);
            writer.WriteDateTimeOffsetValue("DateCreated", DateCreated);
            writer.WriteIntValue("DownloadCount", DownloadCount);
            writer.WriteBoolValue("Forced", Forced);
            writer.WriteStringValue("Format", Format);
            writer.WriteFloatValue("FrameRate", FrameRate);
            writer.WriteBoolValue("HearingImpaired", HearingImpaired);
            writer.WriteStringValue("Id", Id);
            writer.WriteBoolValue("IsHashMatch", IsHashMatch);
            writer.WriteBoolValue("MachineTranslated", MachineTranslated);
            writer.WriteStringValue("Name", Name);
            writer.WriteStringValue("ProviderName", ProviderName);
            writer.WriteStringValue("ThreeLetterISOLanguageName", ThreeLetterISOLanguageName);
        }
    }
}
#pragma warning restore CS0618

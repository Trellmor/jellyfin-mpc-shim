// <auto-generated/>
#pragma warning disable CS0618
using Jellyfin.Sdk.Generated.Sessions.Item.Playing.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Jellyfin.Sdk.Generated.Sessions.Item.Playing
{
    /// <summary>
    /// Builds and executes requests for operations under \Sessions\{sessionId}\Playing
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PlayingRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Jellyfin.Sdk.Generated.Sessions.item.Playing.item collection</summary>
        /// <param name="position">The MediaBrowser.Model.Session.PlaystateCommand.</param>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.Sessions.Item.Playing.Item.WithCommandItemRequestBuilder"/></returns>
        public global::Jellyfin.Sdk.Generated.Sessions.Item.Playing.Item.WithCommandItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("command", position);
                return new global::Jellyfin.Sdk.Generated.Sessions.Item.Playing.Item.WithCommandItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Jellyfin.Sdk.Generated.Sessions.Item.Playing.PlayingRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PlayingRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Sessions/{sessionId}/Playing?itemIds={itemIds}&playCommand={playCommand}{&audioStreamIndex*,mediaSourceId*,startIndex*,startPositionTicks*,subtitleStreamIndex*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Jellyfin.Sdk.Generated.Sessions.Item.Playing.PlayingRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PlayingRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Sessions/{sessionId}/Playing?itemIds={itemIds}&playCommand={playCommand}{&audioStreamIndex*,mediaSourceId*,startIndex*,startPositionTicks*,subtitleStreamIndex*}", rawUrl)
        {
        }
        /// <summary>
        /// Instructs a session to play an item.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Sessions.Item.Playing.PlayingRequestBuilder.PlayingRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Sessions.Item.Playing.PlayingRequestBuilder.PlayingRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Instructs a session to play an item.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Sessions.Item.Playing.PlayingRequestBuilder.PlayingRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Sessions.Item.Playing.PlayingRequestBuilder.PlayingRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.Sessions.Item.Playing.PlayingRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Jellyfin.Sdk.Generated.Sessions.Item.Playing.PlayingRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Jellyfin.Sdk.Generated.Sessions.Item.Playing.PlayingRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Instructs a session to play an item.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PlayingRequestBuilderPostQueryParameters 
        {
            /// <summary>Optional. The index of the audio stream to play.</summary>
            [QueryParameter("audioStreamIndex")]
            public int? AudioStreamIndex { get; set; }
            /// <summary>The ids of the items to play, comma delimited.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("itemIds")]
            public Guid?[]? ItemIds { get; set; }
#nullable restore
#else
            [QueryParameter("itemIds")]
            public Guid?[] ItemIds { get; set; }
#endif
            /// <summary>Optional. The media source id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("mediaSourceId")]
            public string? MediaSourceId { get; set; }
#nullable restore
#else
            [QueryParameter("mediaSourceId")]
            public string MediaSourceId { get; set; }
#endif
            /// <summary>The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.</summary>
            [QueryParameter("playCommand")]
            public global::Jellyfin.Sdk.Generated.Sessions.Item.Playing.PlayCommand? PlayCommand { get; set; }
            /// <summary>Optional. The start index.</summary>
            [QueryParameter("startIndex")]
            public int? StartIndex { get; set; }
            /// <summary>The starting position of the first item.</summary>
            [QueryParameter("startPositionTicks")]
            public long? StartPositionTicks { get; set; }
            /// <summary>Optional. The index of the subtitle stream to play.</summary>
            [QueryParameter("subtitleStreamIndex")]
            public int? SubtitleStreamIndex { get; set; }
        }
    }
}
#pragma warning restore CS0618

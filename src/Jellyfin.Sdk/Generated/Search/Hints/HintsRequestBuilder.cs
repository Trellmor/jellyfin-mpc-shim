// <auto-generated/>
#pragma warning disable CS0618
using Jellyfin.Sdk.Generated.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Jellyfin.Sdk.Generated.Search.Hints
{
    /// <summary>
    /// Builds and executes requests for operations under \Search\Hints
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class HintsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Jellyfin.Sdk.Generated.Search.Hints.HintsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public HintsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Search/Hints?searchTerm={searchTerm}{&excludeItemTypes*,includeArtists*,includeGenres*,includeItemTypes*,includeMedia*,includePeople*,includeStudios*,isKids*,isMovie*,isNews*,isSeries*,isSports*,limit*,mediaTypes*,parentId*,startIndex*,userId*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Jellyfin.Sdk.Generated.Search.Hints.HintsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public HintsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Search/Hints?searchTerm={searchTerm}{&excludeItemTypes*,includeArtists*,includeGenres*,includeItemTypes*,includeMedia*,includePeople*,includeStudios*,isKids*,isMovie*,isNews*,isSeries*,isSports*,limit*,mediaTypes*,parentId*,startIndex*,userId*}", rawUrl)
        {
        }
        /// <summary>
        /// Gets the search hint result.
        /// </summary>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.Models.SearchHintResult"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Jellyfin.Sdk.Generated.Models.SearchHintResult?> GetAsync(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Search.Hints.HintsRequestBuilder.HintsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Jellyfin.Sdk.Generated.Models.SearchHintResult> GetAsync(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Search.Hints.HintsRequestBuilder.HintsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Jellyfin.Sdk.Generated.Models.SearchHintResult>(requestInfo, global::Jellyfin.Sdk.Generated.Models.SearchHintResult.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets the search hint result.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Search.Hints.HintsRequestBuilder.HintsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Search.Hints.HintsRequestBuilder.HintsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json, application/json;profile=\"CamelCase\", application/json;profile=\"PascalCase\"");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.Search.Hints.HintsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Jellyfin.Sdk.Generated.Search.Hints.HintsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Jellyfin.Sdk.Generated.Search.Hints.HintsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Gets the search hint result.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class HintsRequestBuilderGetQueryParameters 
        {
            /// <summary>If specified, results with these item types are filtered out. This allows multiple, comma delimited.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("excludeItemTypes")]
            public global::Jellyfin.Sdk.Generated.Models.BaseItemKind[]? ExcludeItemTypes { get; set; }
#nullable restore
#else
            [QueryParameter("excludeItemTypes")]
            public global::Jellyfin.Sdk.Generated.Models.BaseItemKind[] ExcludeItemTypes { get; set; }
#endif
            /// <summary>Optional filter whether to include artists.</summary>
            [QueryParameter("includeArtists")]
            public bool? IncludeArtists { get; set; }
            /// <summary>Optional filter whether to include genres.</summary>
            [QueryParameter("includeGenres")]
            public bool? IncludeGenres { get; set; }
            /// <summary>If specified, only results with the specified item types are returned. This allows multiple, comma delimited.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("includeItemTypes")]
            public global::Jellyfin.Sdk.Generated.Models.BaseItemKind[]? IncludeItemTypes { get; set; }
#nullable restore
#else
            [QueryParameter("includeItemTypes")]
            public global::Jellyfin.Sdk.Generated.Models.BaseItemKind[] IncludeItemTypes { get; set; }
#endif
            /// <summary>Optional filter whether to include media.</summary>
            [QueryParameter("includeMedia")]
            public bool? IncludeMedia { get; set; }
            /// <summary>Optional filter whether to include people.</summary>
            [QueryParameter("includePeople")]
            public bool? IncludePeople { get; set; }
            /// <summary>Optional filter whether to include studios.</summary>
            [QueryParameter("includeStudios")]
            public bool? IncludeStudios { get; set; }
            /// <summary>Optional filter for kids.</summary>
            [QueryParameter("isKids")]
            public bool? IsKids { get; set; }
            /// <summary>Optional filter for movies.</summary>
            [QueryParameter("isMovie")]
            public bool? IsMovie { get; set; }
            /// <summary>Optional filter for news.</summary>
            [QueryParameter("isNews")]
            public bool? IsNews { get; set; }
            /// <summary>Optional filter for series.</summary>
            [QueryParameter("isSeries")]
            public bool? IsSeries { get; set; }
            /// <summary>Optional filter for sports.</summary>
            [QueryParameter("isSports")]
            public bool? IsSports { get; set; }
            /// <summary>Optional. The maximum number of records to return.</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>If specified, only results with the specified media types are returned. This allows multiple, comma delimited.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("mediaTypes")]
            public global::Jellyfin.Sdk.Generated.Models.MediaType[]? MediaTypes { get; set; }
#nullable restore
#else
            [QueryParameter("mediaTypes")]
            public global::Jellyfin.Sdk.Generated.Models.MediaType[] MediaTypes { get; set; }
#endif
            /// <summary>If specified, only children of the parent are returned.</summary>
            [QueryParameter("parentId")]
            public Guid? ParentId { get; set; }
            /// <summary>The search term to filter on.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("searchTerm")]
            public string? SearchTerm { get; set; }
#nullable restore
#else
            [QueryParameter("searchTerm")]
            public string SearchTerm { get; set; }
#endif
            /// <summary>Optional. The record index to start at. All items with a lower index will be dropped from the results.</summary>
            [QueryParameter("startIndex")]
            public int? StartIndex { get; set; }
            /// <summary>Optional. Supply a user id to search within a user&apos;s library or omit to search all.</summary>
            [QueryParameter("userId")]
            public Guid? UserId { get; set; }
        }
    }
}
#pragma warning restore CS0618

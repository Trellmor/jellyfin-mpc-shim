// <auto-generated/>
#pragma warning disable CS0618
using Jellyfin.Sdk.Generated.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Jellyfin.Sdk.Generated.Audio.Item.Universal
{
    /// <summary>
    /// Builds and executes requests for operations under \Audio\{itemId}\universal
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UniversalRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Jellyfin.Sdk.Generated.Audio.Item.Universal.UniversalRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UniversalRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Audio/{itemId}/universal{?audioBitRate*,audioCodec*,breakOnNonKeyFrames*,container*,deviceId*,enableAudioVbrEncoding*,enableRedirection*,enableRemoteMedia*,maxAudioBitDepth*,maxAudioChannels*,maxAudioSampleRate*,maxStreamingBitrate*,mediaSourceId*,startTimeTicks*,transcodingAudioChannels*,transcodingContainer*,transcodingProtocol*,userId*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Jellyfin.Sdk.Generated.Audio.Item.Universal.UniversalRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UniversalRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Audio/{itemId}/universal{?audioBitRate*,audioCodec*,breakOnNonKeyFrames*,container*,deviceId*,enableAudioVbrEncoding*,enableRedirection*,enableRemoteMedia*,maxAudioBitDepth*,maxAudioChannels*,maxAudioSampleRate*,maxStreamingBitrate*,mediaSourceId*,startTimeTicks*,transcodingAudioChannels*,transcodingContainer*,transcodingProtocol*,userId*}", rawUrl)
        {
        }
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Jellyfin.Sdk.Generated.Models.ProblemDetails">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task GetAsync(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Audio.Item.Universal.UniversalRequestBuilder.UniversalRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task GetAsync(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Audio.Item.Universal.UniversalRequestBuilder.UniversalRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "404", global::Jellyfin.Sdk.Generated.Models.ProblemDetails.CreateFromDiscriminatorValue },
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Jellyfin.Sdk.Generated.Models.ProblemDetails">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task HeadAsync(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Audio.Item.Universal.UniversalRequestBuilder.UniversalRequestBuilderHeadQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task HeadAsync(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Audio.Item.Universal.UniversalRequestBuilder.UniversalRequestBuilderHeadQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToHeadRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "404", global::Jellyfin.Sdk.Generated.Models.ProblemDetails.CreateFromDiscriminatorValue },
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Audio.Item.Universal.UniversalRequestBuilder.UniversalRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Audio.Item.Universal.UniversalRequestBuilder.UniversalRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "audio/*, application/json, application/json;profile=\"CamelCase\", application/json;profile=\"PascalCase\"");
            return requestInfo;
        }
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToHeadRequestInformation(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Audio.Item.Universal.UniversalRequestBuilder.UniversalRequestBuilderHeadQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToHeadRequestInformation(Action<RequestConfiguration<global::Jellyfin.Sdk.Generated.Audio.Item.Universal.UniversalRequestBuilder.UniversalRequestBuilderHeadQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.HEAD, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "audio/*, application/json, application/json;profile=\"CamelCase\", application/json;profile=\"PascalCase\"");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.Audio.Item.Universal.UniversalRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Jellyfin.Sdk.Generated.Audio.Item.Universal.UniversalRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Jellyfin.Sdk.Generated.Audio.Item.Universal.UniversalRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UniversalRequestBuilderGetQueryParameters 
        {
            /// <summary>Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.</summary>
            [QueryParameter("audioBitRate")]
            public int? AudioBitRate { get; set; }
            /// <summary>Optional. The audio codec to transcode to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("audioCodec")]
            public string? AudioCodec { get; set; }
#nullable restore
#else
            [QueryParameter("audioCodec")]
            public string AudioCodec { get; set; }
#endif
            /// <summary>Optional. Whether to break on non key frames.</summary>
            [QueryParameter("breakOnNonKeyFrames")]
            public bool? BreakOnNonKeyFrames { get; set; }
            /// <summary>Optional. The audio container.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("container")]
            public string[]? Container { get; set; }
#nullable restore
#else
            [QueryParameter("container")]
            public string[] Container { get; set; }
#endif
            /// <summary>The device id of the client requesting. Used to stop encoding processes when needed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("deviceId")]
            public string? DeviceId { get; set; }
#nullable restore
#else
            [QueryParameter("deviceId")]
            public string DeviceId { get; set; }
#endif
            /// <summary>Optional. Whether to enable Audio Encoding.</summary>
            [QueryParameter("enableAudioVbrEncoding")]
            public bool? EnableAudioVbrEncoding { get; set; }
            /// <summary>Whether to enable redirection. Defaults to true.</summary>
            [QueryParameter("enableRedirection")]
            public bool? EnableRedirection { get; set; }
            /// <summary>Optional. Whether to enable remote media.</summary>
            [QueryParameter("enableRemoteMedia")]
            public bool? EnableRemoteMedia { get; set; }
            /// <summary>Optional. The maximum audio bit depth.</summary>
            [QueryParameter("maxAudioBitDepth")]
            public int? MaxAudioBitDepth { get; set; }
            /// <summary>Optional. The maximum number of audio channels.</summary>
            [QueryParameter("maxAudioChannels")]
            public int? MaxAudioChannels { get; set; }
            /// <summary>Optional. The maximum audio sample rate.</summary>
            [QueryParameter("maxAudioSampleRate")]
            public int? MaxAudioSampleRate { get; set; }
            /// <summary>Optional. The maximum streaming bitrate.</summary>
            [QueryParameter("maxStreamingBitrate")]
            public int? MaxStreamingBitrate { get; set; }
            /// <summary>The media version id, if playing an alternate version.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("mediaSourceId")]
            public string? MediaSourceId { get; set; }
#nullable restore
#else
            [QueryParameter("mediaSourceId")]
            public string MediaSourceId { get; set; }
#endif
            /// <summary>Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.</summary>
            [QueryParameter("startTimeTicks")]
            public long? StartTimeTicks { get; set; }
            /// <summary>Optional. The number of how many audio channels to transcode to.</summary>
            [QueryParameter("transcodingAudioChannels")]
            public int? TranscodingAudioChannels { get; set; }
            /// <summary>Optional. The container to transcode to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("transcodingContainer")]
            public string? TranscodingContainer { get; set; }
#nullable restore
#else
            [QueryParameter("transcodingContainer")]
            public string TranscodingContainer { get; set; }
#endif
            /// <summary>Optional. The transcoding protocol.</summary>
            [QueryParameter("transcodingProtocol")]
            public global::Jellyfin.Sdk.Generated.Audio.Item.Universal.MediaStreamProtocol? TranscodingProtocol { get; set; }
            /// <summary>Optional. The user id.</summary>
            [QueryParameter("userId")]
            public Guid? UserId { get; set; }
        }
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UniversalRequestBuilderHeadQueryParameters 
        {
            /// <summary>Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.</summary>
            [QueryParameter("audioBitRate")]
            public int? AudioBitRate { get; set; }
            /// <summary>Optional. The audio codec to transcode to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("audioCodec")]
            public string? AudioCodec { get; set; }
#nullable restore
#else
            [QueryParameter("audioCodec")]
            public string AudioCodec { get; set; }
#endif
            /// <summary>Optional. Whether to break on non key frames.</summary>
            [QueryParameter("breakOnNonKeyFrames")]
            public bool? BreakOnNonKeyFrames { get; set; }
            /// <summary>Optional. The audio container.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("container")]
            public string[]? Container { get; set; }
#nullable restore
#else
            [QueryParameter("container")]
            public string[] Container { get; set; }
#endif
            /// <summary>The device id of the client requesting. Used to stop encoding processes when needed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("deviceId")]
            public string? DeviceId { get; set; }
#nullable restore
#else
            [QueryParameter("deviceId")]
            public string DeviceId { get; set; }
#endif
            /// <summary>Optional. Whether to enable Audio Encoding.</summary>
            [QueryParameter("enableAudioVbrEncoding")]
            public bool? EnableAudioVbrEncoding { get; set; }
            /// <summary>Whether to enable redirection. Defaults to true.</summary>
            [QueryParameter("enableRedirection")]
            public bool? EnableRedirection { get; set; }
            /// <summary>Optional. Whether to enable remote media.</summary>
            [QueryParameter("enableRemoteMedia")]
            public bool? EnableRemoteMedia { get; set; }
            /// <summary>Optional. The maximum audio bit depth.</summary>
            [QueryParameter("maxAudioBitDepth")]
            public int? MaxAudioBitDepth { get; set; }
            /// <summary>Optional. The maximum number of audio channels.</summary>
            [QueryParameter("maxAudioChannels")]
            public int? MaxAudioChannels { get; set; }
            /// <summary>Optional. The maximum audio sample rate.</summary>
            [QueryParameter("maxAudioSampleRate")]
            public int? MaxAudioSampleRate { get; set; }
            /// <summary>Optional. The maximum streaming bitrate.</summary>
            [QueryParameter("maxStreamingBitrate")]
            public int? MaxStreamingBitrate { get; set; }
            /// <summary>The media version id, if playing an alternate version.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("mediaSourceId")]
            public string? MediaSourceId { get; set; }
#nullable restore
#else
            [QueryParameter("mediaSourceId")]
            public string MediaSourceId { get; set; }
#endif
            /// <summary>Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.</summary>
            [QueryParameter("startTimeTicks")]
            public long? StartTimeTicks { get; set; }
            /// <summary>Optional. The number of how many audio channels to transcode to.</summary>
            [QueryParameter("transcodingAudioChannels")]
            public int? TranscodingAudioChannels { get; set; }
            /// <summary>Optional. The container to transcode to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("transcodingContainer")]
            public string? TranscodingContainer { get; set; }
#nullable restore
#else
            [QueryParameter("transcodingContainer")]
            public string TranscodingContainer { get; set; }
#endif
            /// <summary>Optional. The transcoding protocol.</summary>
            [QueryParameter("transcodingProtocol")]
            public global::Jellyfin.Sdk.Generated.Audio.Item.Universal.MediaStreamProtocol? TranscodingProtocol { get; set; }
            /// <summary>Optional. The user id.</summary>
            [QueryParameter("userId")]
            public Guid? UserId { get; set; }
        }
    }
}
#pragma warning restore CS0618
